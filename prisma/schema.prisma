// database
datasource db {
  provider = "sqlite"
  url      = "file:../dev.db"
}

// generator
generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

// data models
model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String @ignore

  files    File[]
  projects Project[]
  @@map("user")
}

model File {
  id           Int           @id @default(autoincrement())
  filename     String
  extension    String
  url          String
  size         Int?
  created_date DateTime      @default(now())
  updated_date DateTime      @updatedAt
  private      Boolean
  access_token String?
  user_id      Int
  user         User          @relation(fields: [user_id], references: [id])
  project      Project?
  image        Image?
  presentation Presentation?
  document     Document?
  audio        Audio?
  video        Video?

  @@unique([filename, size], map: "filename_size_unique")
  @@map("file")
}

model Project {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  category String
  userId   Int
  fileId   Int     @unique
  user     User    @relation(fields: [userId], references: [id])
  file     File    @relation(fields: [fileId], references: [id])
  images    Image[]
  @@map("project")
}

model Image {
  id        Int        @id @default(autoincrement())
  height    Int?
  width     Int?
  projectId Int
  fileId    Int        @unique
  project   Project    @relation(fields: [projectId], references: [id])
  file      File       @relation(fields: [fileId], references: [id])
  thumbnail Thumbnail?
  @@map("image")
}

model Presentation {
  id           Int    @id @default(autoincrement())
  title        String @unique
  total_slides Int?
  fileId       Int    @unique
  file         File   @relation(fields: [fileId], references: [id])
  @@map("presentation")
}

model Document {
  id         Int    @id @default(autoincrement())
  font       String
  text_size  Int
  characters Int?
  fileId     Int    @unique
  file       File   @relation(fields: [fileId], references: [id])
  @@map("document")
}

model Audio {
  id     Int    @id @default(autoincrement())
  length Int?
  fileId Int    @unique
  file   File   @relation(fields: [fileId], references: [id])
  music  Music?
  @@map("audio")
}

model Music {
  id      Int    @id @default(autoincrement())
  author  String
  album   String
  genre   String
  audioId Int    @unique
  audio   Audio  @relation(fields: [audioId], references: [id])
  @@map("music")
}

model Video {
  id        Int        @id @default(autoincrement())
  height    Int?
  width     Int?
  length    Int?
  genre     String
  season    Int
  title     String     @unique
  type      String
  fileId    Int        @unique
  file      File       @relation(fields: [fileId], references: [id])
  thumbnail Thumbnail?
  @@map("video")
}

model Thumbnail {
  id      Int   @id @default(autoincrement())
  videoId Int   @unique
  imageId Int   @unique
  video   Video @relation(fields: [videoId], references: [id])
  image   Image @relation(fields: [imageId], references: [id])
  @@map("thumbnail")
}
